#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift
set -u -e -o pipefail
THIS_DIR="$(bash_setup dirname_of_bin "$0")"
TEMPLATES="$THIS_DIR/templates"

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'


function git_is_clean {
  if ! git_repo_is_clean
  then
    echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
    exit 1
  fi
}



GREEN=$(tput setaf 2)
GREEN_BG=$(tput setab 2)
WHITE=$(tput setaf 7)
BOLD_WHITE_ON_GREEN=$(tput bold)${WHITE}${GREEN_BG}
BOLD_WHITE=$(tput bold)${WHITE}
RESET_COLOR=$(tput sgr0)
ORANGE='\e[0;33m'
RED='\e[0;31m'
BG_RED='\e[1;31m'

case "$action" in

  "help"|"--help")
    echo " ====================================================="
    echo " $ js_setup   jshint     file"
    echo ""
    echo " $ js_setup   js_zero    extended_regexp_for_grep"
    echo " $ js_setup   js_clean"
    echo ""
    echo " $ js_setup   add_dev_log  file"
    echo " ====================================================="
    bash_setup print_help $0
    exit 0
    ;;

  "js_clean")
    js_setup js_zero "console.log\(|debugger"
    ;;

  "has_ts")
    # === $ has_typescript path/to/file.js
    # === Exit 0 if path/to/file.ts exists. Otherwise Exit 1.
    file="$1"
    shift
    ts_file="$(dirname $file)/$(basename $file .js).ts"
    [[ -f "$ts_file" ]] && exit 0
    ;;

  "add_dev_log")
    file="$1"
    shift
    echo -e "\n\n/* global process */\nvar log; log = function (...args) {\n  return (process.env.IS_DEV) ? console.log.apply(console, args) : null;\n};" >> $file
    exit 0

    if ! grep "var log;" "$file" 1>/dev/null; then
      output=$(sed '/^$/a var log;\nlog = function () {\n  return (process.env.IS_DEV) ? console.log.apply(console, arguments) : null;\n};' $file)
      echo -e "$output" > $file
    fi
    ;;

  "js_zero")
    SUBSTR="$1"
    FOUND="no"

    for FILE in $(git ls-files | grep -E '.js$') ; do
      GREPS="$(grep -n -E "$SUBSTR" $FILE || echo '')"
      if [ ! -z "$GREPS" ]
      then
        echo -e -n "\e[01;31m$FILE\e[0m " 1>&2
        echo "contains $SUBSTR" 1>&2
        echo "$GREPS" 1>&2
        FOUND="yes"
      fi
    done

    if [ "$FOUND" = "yes" ]
    then
      exit 1
    fi
    ;;


  new)
    # === new         # project exists on github
    # === new project # in the project directory

    if [[ -z "$@" ]]; then
      name="$(basename $(pwd))"
      if [[ -d ".git" ]]; then
        git pull
      fi
    else # project exists on github
      name="$1"; shift
      git clone "git@github.com:da99/$name.git"
      cd "$name"
    fi

    export NAME="$name"
    mkdir -p bin

    bash_setup cp_unless_exists "$TEMPLATES/_gitignore" ".gitignore"
    bash_setup new_bin

    chmod +x "bin/$name"

    # bash_setup mush_unless_exists "$TEMPLATES/bin"        "bin/$name"
    # bash_setup cp_unless_exists "$TEMPLATES/_bowerrc"   ".bowerrc"
    # bash_setup cp_unless_exists "$TEMPLATES/specs.js"   "specs.js"
    # bash_setup mush_unless_exists "$TEMPLATES/specs.html" "specs.html"
    ;;

  bump)
    # === bump major|minor|patch
    git push
    $0 js_clean

    if [[ -f package.json ]]; then
      echo "=== Updating modules..."
      npm update
      # === "npm shrinkwrap" will fail if extraneous
      #     modules are found. "npm prune" takes care
      #     of this.
      npm prune
      if grep --extended-regexp ':\s+"latest' package.json ; then
        echo "=== Skipping shrinkwrap because \"latest\" string found in package.json" 1>&2
      else
        npm shrinkwrap
      fi
    fi

    if [[ ! -f specs.html ]]; then
      if [[ -f specs.js ]]; then
        $0 mocha specs.js
      fi
    fi

    if ! git_repo_is_clean; then
      echo "=== Git repo is not clean" 1>&2
      git status
      exit 1
    fi

    if [[ -f bower.json ]]; then
      bash_setup bump $@
    else
      if [[ -f package.json ]] ; then
        npm version $@
        git push origin "v$(node -p "require('./package.json').version")"
        git push
      else
        echo "!!! Could not determine how to update version. No bower.json, package.json found." 1>&2
        exit 1
      fi
    fi
    ;;

  "mocha")
    if [[ -z "$IS_DEV" ]]; then
      exit 1
    fi
    echo "=== node_modules/mocha/bin/mocha --es_staging "$@""
    if [[ ! -f node_modules/mocha/bin/mocha ]] ; then
      cmd="npm install mocha"
      echo "=== $cmd"
      $cmd
    fi
    node_modules/mocha/bin/mocha --es_staging "$@"
    ;;

  "watch")
    files="$(echo ./*.js)"
    for f in $files
    do
      js_setup jshint! $f
    done

    if [[ -n "$@" ]]; then
      $0 mocha "$@" specs.js || :
    fi

    echo -e "=== Watching ${BOLD_WHITE}$(basename $(pwd))${RESET_COLOR} (proc $$)...\n"

    while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      echo -e "=== $CHANGE ($path)"

      if [[ "$path" =~ ".js" ]]; then
        if js_setup jshint! $path && [[ -f "specs.js" ]] ; then
          echo "=== Running: specs.js"
          $0 mocha "$@" specs.js || :
        fi
      fi

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write  $files )

    ;;

  "jshint")
    path="$1"; shift
    stamp="$(date '+%r')"

    is_fine=""
    {
      echo -e "=== jshint ${Bold}${path}${Reset}: " \
        && jshint $path && is_fine="yes" \
        && tput cuu1                     \
        && tput el                       \
        && echo -e "=== jshint ${Bold}${path}${Reset} ${Bold}${Green}@${Reset} $stamp"; \
      } \
      || \
      { stat=$?; echo -e "${Red}Failed${Reset}"; exit $stat; }
    ;;

  "jshint!")
    target_dir="$(pwd)"
    this_dir=$(dirname $(dirname $0))
    npm_dir="${this_dir}/node_modules"
    reporter="node_modules/jshint-path-reporter/index.js"
    jshint_bin="${npm_dir}/jshint/bin/jshint"
    cmd="$jshint_bin --reporter $reporter"


    if [[ ! -f ${jshint_bin} ]]; then
      cd $this_dir
      echo "=== Installing jshint to $(pwd)..."
      npm install jshint
      cd $target_dir
    fi

    if [[ ! -f "$reporter" ]]; then
      echo "=== Installing jshint-path-reporter..."
      npm install jshint-path-reporter
    fi

    echo -n "=== Running jshint: $@: "
    $cmd "$@"
    # echo -e "${GREEN}Passed${RESET_COLOR}"
    # echo -e "${RED}Fail${RESET_COLOR}"
    ;;


  list)
    # === $ ... list
    # === Prints available remote node versions.
    $0 nvm "ls-remote"
    ;;


  latest)
    # === latest   # === e.g.: 5.5.0
    cmd="curl -s https://nodejs.org/download/release/index.tab"
    file="$($cmd)"
    latest="$(echo "$file" | head -n2 | tail -n 1 | cut -f1  | cut -d'v' -f2 || :)"
    if [[ -z "$latest" ]]; then
      echo "!!! could not get latest node version: "
      exit 1
    fi
    echo "$latest"
    ;;

  upgrade)
    # === upgrade  # Global if package.json, bower.json not found.
      if [[ -f package.json ]]; then
        npm prune
        npm update --save
        ncu -u
      fi
      if [[ -f bower.json ]]; then
        ncu -m bower
      fi
      if [[ ! -f package.json && ! -f bower.json ]]; then
        $0 install
        echo "=== Checking npm global packages"
        npm outdated -g
      fi
      ;;

  "install")
    # === install  # Installs: node_build, node

    # === install: node_build
    cd /progs
    echo -n "=== Installing/updating $(bash_setup colorize YELLOW node-build): "
    git_setup clone_or_pull https://github.com/nodenv/node-build /progs/
    node_build="/progs/node-build/bin/node-build"

    # === install: node
    mkdir -p /progs/node/
    latest="$($0 latest)"

    if [[ ! -d /progs/node/$latest ]]; then
      echo "=== Installing node: $latest"
      $node_build "$latest" /progs/node/$latest
    fi

    MSG="Already installed:"
    current="/progs/node/current"
    if [[ "$(readlink -f "$current")" != "$(readlink -f "/progs/node/$latest")" ]]; then
      if [[ -L "$current" ]]; then
        rm "$current"
      fi
      ln -s /progs/node/$latest "$current"
      packages="jshint npm-check-updates bower"
      npm install -g $packages
      echo -n "=== Installing $(bash_setup colorize YELLOW $packages)... "
      MSG="Installed:"
    fi

    final="$(type node)"
    if [[ "$final" != */progs/node/current/* ]]; then
      echo "!!! Something went wrong: $final" 1>&2
      exit 1
    fi

    echo "=== $MSG: $(bash_setup colorize YELLOW "$(node -v)") and $final"
    exit 0
    # === $ ... install VERSION
    # === Uses NVM to install a node version.
    # $0 nvm install $@
    mkdir -p /progs/node
    cd /progs/node
    dir="node-${latest}-linux-x64"
    archive="${dir}.tar.gz"
    if [[ ! -d "$dir" ]]; then
      rm -f "$archive"
      wget "https://nodejs.org/dist/$latest/$archive"
      tar xvzf "$archive"
    fi
    cd "$dir"
    ./configure
    make
    make install
    ;;


  "nvm")
    if ! type nvm 2>/dev/null; then
      if [[ -d /progs/nvm ]]; then
        cd /progs/nvm
        git pull 1>/dev/null
      else
        cd /progs
        git clone https://github.com/creationix/nvm
        cd nvm
      fi

      source ./nvm.sh
    fi
    set +u
    nvm $@
    ;;

  *)
    func_file="$THIS_DIR/bin/lib/${action}.sh"
    if [[ -s "$func_file" ]]; then
      source "$func_file"
      "$action" $@
      exit 0
    fi

    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

  esac


