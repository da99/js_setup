#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift
set -u -e -o pipefail
THIS_DIR="$(bash_setup dirname_of_bin "$0")"
THIS_SCRIPT="$0"
TEMPLATES="$THIS_DIR/templates"

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'


function git_is_clean {
  if ! git_setup is-clean
  then
    echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
    exit 1
  fi
}



GREEN=$(tput setaf 2)
GREEN_BG=$(tput setab 2)
WHITE=$(tput setaf 7)
BOLD_WHITE_ON_GREEN=$(tput bold)${WHITE}${GREEN_BG}
BOLD_WHITE=$(tput bold)${WHITE}
RESET_COLOR=$(tput sgr0)
ORANGE='\e[0;33m'
RED='\e[0;31m'
BG_RED='\e[1;31m'

case "$action" in

  "help"|"--help")
    echo " ====================================================="
    echo " $ js_setup   jshint     file"
    echo ""
    echo " $ js_setup   js_zero    extended_regexp_for_grep"
    echo " $ js_setup   js_clean"
    echo ""
    echo " $ js_setup   add_dev_log  file"
    echo " ====================================================="
    mksh_setup print-help $0
    exit 0
    ;;

  "js_clean")
    js_setup js_zero "console.log\(|debugger"
    ;;

  "has_ts")
    # === $ has_typescript path/to/file.js
    # === Exit 0 if path/to/file.ts exists. Otherwise Exit 1.
    file="$1"
    shift
    ts_file="$(dirname $file)/$(basename $file .js).ts"
    [[ -f "$ts_file" ]] && exit 0
    ;;

  "add_dev_log")
    file="$1"
    shift
    echo -e "\n\n/* global process */\nvar log; log = function (...args) {\n  return (process.env.IS_DEV) ? console.log.apply(console, args) : null;\n};" >> $file
    exit 0

    if ! grep "var log;" "$file" 1>/dev/null; then
      output=$(sed '/^$/a var log;\nlog = function () {\n  return (process.env.IS_DEV) ? console.log.apply(console, arguments) : null;\n};' $file)
      echo -e "$output" > $file
    fi
    ;;

  "js_zero")
    SUBSTR="$1"
    FOUND="no"

    for FILE in $(git ls-files | grep -E '.js$') ; do
      GREPS="$(grep -n -E "$SUBSTR" $FILE || echo '')"
      if [ ! -z "$GREPS" ]
      then
        echo -e -n "\e[01;31m$FILE\e[0m " 1>&2
        echo "contains $SUBSTR" 1>&2
        echo "$GREPS" 1>&2
        FOUND="yes"
      fi
    done

    if [ "$FOUND" = "yes" ]
    then
      exit 1
    fi
    ;;


  new)
    # === new         # project exists on github
    # === new project # in the project directory

    if [[ -z "$@" ]]; then
      name="$(basename $(pwd))"
      if [[ -d ".git" ]]; then
        git pull
      fi
    else # project exists on github
      name="$1"; shift
      git clone "git@github.com:da99/$name.git"
      cd "$name"
    fi

    export NAME="$name"
    mkdir -p bin

    bash_setup cp_unless_exists "$TEMPLATES/_gitignore" ".gitignore"
    bash_setup new_bin

    chmod +x "bin/$name"

    # bash_setup mush_unless_exists "$TEMPLATES/bin"        "bin/$name"
    # bash_setup cp_unless_exists "$TEMPLATES/_bowerrc"   ".bowerrc"
    # bash_setup cp_unless_exists "$TEMPLATES/specs.js"   "specs.js"
    # bash_setup mush_unless_exists "$TEMPLATES/specs.html" "specs.html"
    ;;

  "mocha")
    if [[ -z "$IS_DEV" ]]; then
      exit 1
    fi
    echo "=== node_modules/mocha/bin/mocha --es_staging "$@""
    if [[ ! -f node_modules/mocha/bin/mocha ]] ; then
      cmd="npm install mocha"
      echo "=== $cmd"
      $cmd
    fi
    node_modules/mocha/bin/mocha --es_staging "$@"
    ;;

  "watch")
    files="$(echo ./*.js)"
    for f in $files
    do
      js_setup jshint! $f
    done

    if [[ -n "$@" ]]; then
      $0 mocha "$@" specs.js || :
    fi

    echo -e "=== Watching ${BOLD_WHITE}$(basename $(pwd))${RESET_COLOR} (proc $$)...\n"

    while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      echo -e "=== $CHANGE ($path)"

      if [[ "$path" =~ ".js" ]]; then
        if js_setup jshint! $path && [[ -f "specs.js" ]] ; then
          echo "=== Running: specs.js"
          $0 mocha "$@" specs.js || :
        fi
      fi

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write  $files )

    ;;

  "jshint")
    # === {{CMD}}  file1
    # === {{CMD}}  file1  file2  file3...
    # === {{CMD}}  my/files/*.js
    stamp="$(date '+%r')"


    # === We have to make sure each file exists.
    #     jshint will still exit 0 if file is not found.
    declare -a FILES
    while [[ -n "$@" ]]; do
      FILE="$1"; shift
      if [[ ! -f "$FILE" ]]; then
        mksh_setup RED "!!! {{Not a file}}: $FILE"
        exit 1
      fi
      set +u
      FILES=("${FILES[@]}" "$FILE")
      set -u
    done

    mksh_setup RED "=== jshint {{${FILES[@]}}}: "
    {
      jshint "${FILES[@]}"            \
        && tput cuu1                     \
        && tput el                        \
        && echo -e "=== jshint ${Bold}${FILES[@]}${Reset} ${Bold}${Green}@${Reset} $stamp"; \
      } || {
      stat=$?
      echo -e "${Red}Failed${Reset}"
      exit $stat
    }
    ;;

  "jshint!")
    target_dir="$(pwd)"
    this_dir=$(dirname $(dirname $0))
    npm_dir="${this_dir}/node_modules"
    reporter="node_modules/jshint-path-reporter/index.js"
    jshint_bin="${npm_dir}/jshint/bin/jshint"
    cmd="$jshint_bin --reporter $reporter"


    if [[ ! -f ${jshint_bin} ]]; then
      cd $this_dir
      echo "=== Installing jshint to $(pwd)..."
      npm install jshint
      cd $target_dir
    fi

    if [[ ! -f "$reporter" ]]; then
      echo "=== Installing jshint-path-reporter..."
      npm install jshint-path-reporter
    fi

    echo -n "=== Running jshint: $@: "
    $cmd "$@"
    # echo -e "${GREEN}Passed${RESET_COLOR}"
    # echo -e "${RED}Fail${RESET_COLOR}"
    ;;


  list)
    # === $ ... list
    # === Prints available remote node versions.
    $0 nvm "ls-remote"
    ;;


  latest)
    # === latest   # === e.g.: 5.5.0
    cmd="curl -s https://nodejs.org/download/release/index.tab"
    file="$($cmd)"
    latest="$(echo "$file" | head -n2 | tail -n 1 | cut -f1  | cut -d'v' -f2 || :)"
    if [[ -z "$latest" ]]; then
      echo "!!! could not get latest node version: "
      exit 1
    fi
    echo "$latest"
    ;;

  "install")
    $THIS_SCRIPT install-node
    exit 0
    ;;


  "nvm")
    if ! type nvm 2>/dev/null; then
      if [[ -d /progs/nvm ]]; then
        cd /progs/nvm
        git pull 1>/dev/null
      else
        cd /progs
        git clone https://github.com/creationix/nvm
        cd nvm
      fi

      source ./nvm.sh
    fi
    set +u
    nvm $@
    ;;

  *)
    source "$THIS_DIR/../mksh_setup/bin/source/name-to-func/_.sh"
    name-to-func "$action"  "$@"
    ;;

  esac


