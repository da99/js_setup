#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift
set -u -e -o pipefail


function git_is_clean {
    if ! git_repo_is_clean
    then
      echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
      exit 1
    fi
}


TEMPLATES="/apps/js_setup/templates"

GREEN=$(tput setaf 2)
GREEN_BG=$(tput setb 2)
WHITE=$(tput setaf 7)
BOLD_WHITE_ON_GREEN=$(tput bold)${WHITE}${GREEN_BG}
BOLD_WHITE=$(tput bold)${WHITE}
RESET_COLOR=$(tput sgr0)
ORANGE='\e[0;33m'
RED='\e[0;31m'
BG_RED='\e[1;31m'

case "$action" in

  "help")
    echo " ====================================================="
    echo ""
    echo " $ js_setup   init_bower"
    echo " $ js_setup   jshint     file"
    echo " $ js_setup   version    ..."
    echo ""
    echo " $ js_setup   js_zero    substring"
    echo " $ js_setup   js_clean"
    echo ""
    echo " ====================================================="
    echo ""
    exit 0
    ;;

  "js_clean")
    js_setup js_zero console.log
    js_setup js_zero debugger
    ;;

  "js_zero")
    SUBSTR="$1"
    FOUND="no"

    FILES="$(find . -type f -name "*.js" -not -wholename "*/.git*" -and -not -wholename "*/bower_components/*" -and -not -wholename "*/vendor/*" -and -not -wholename "*/node_modules/*"  )"

    for FILE in $FILES ; do
      GREPS="$(grep -n "$SUBSTR" $FILE || echo '')"
      if [ ! -z "$GREPS" ]
      then
        echo -e -n "\e[01;31m$FILE\e[0m " 1>&2
        echo "contains $SUBSTR" 1>&2
        echo "$GREPS" 1>&2
        FOUND="yes"
      fi
    done

    if [ "$FOUND" = "yes" ]
    then
      exit 1
    fi
    ;;


  "init_bower")
    name="$(basename $(pwd))"

    if [[ ! -f ".gitignore" ]]; then
      echo "/node_modules" >> .gitignore
      echo "/scripts" >> .gitignore
    fi

    if [[ ! -f "specs.html" ]]; then
      contents="$(cat $TEMPLATES/specs.html)"
      echo "${contents//\{\{name\}\}/$name}" > specs.html
      echo "=== specs.html"
    fi

    if [[ ! -f "specs.js" ]]; then
      echo '"use strict";' > specs.js
      echo "=== specs.js"
    fi

    if [[ ! -f "bin/$name" ]]; then
      mkdir -p bin/
      contents="$(cat $TEMPLATES/bin)"
      echo "${contents//\{\{name\}\}/$name}" > bin/$name
      chmod +x bin/$name
      echo "=== bin/$name"
    fi

    if [[ ! -f ".bowerrc" ]]; then
      cp "$TEMPLATES/.bowerrc"   .bowerrc
      echo "=== .bowerrc"
    fi

    if [[ ! -d "node_modules/bower" ]]; then
      npm install bower
    fi

    if [[ ! -f "bower.json" ]]; then
      bin/$name bower init
    fi

    if [[ ! -d "scripts/jasmine" ]]; then
      bin/$name bower install --save-dev jasmine
      bin/$name bower install --save     lodash
      bin/$name bower install --save     jquery
    fi
    ;;

  "version")
    git push
    js_setup js_clean
    if [[ -f bower.json ]]; then
      git_is_clean
      node_modules/bower/bin/bower version $@
      git push origin "v$(iojs -p "require('./bower').version")"
    else
      if [[ ! -f package.json ]] ; then
        echo "=== No bower.json, package.json found." 1>&2
        exit 1
      fi
      npm shrinkwrap
      git_is_clean
      npm version $@
      git push origin "v$(iojs -p "require('./package.json').version")"
    fi

    git push
    ;;

  "watch")
    files="$(echo ./*.js)"
    for f in $files
    do
      js_setup jshint! $f
    done

    echo -e "=== Watching ${BOLD_WHITE}$(basename $(pwd))${RESET_COLOR} (proc $$)...\n"

    while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      echo -e "=== $CHANGE ($path)"

      if [[ "$path" =~ ".js" ]]; then
        if js_setup jshint! $path && [[ -f "specs.js" ]] ; then
          echo "=== Running: specs.js"
          node_modules/mocha/bin/mocha specs.js || :
        fi
      fi

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write  $files )

    ;;

  "jshint")
    $0 jshint! "$@" || :
    ;;

  "jshint!")
    target_dir="$(pwd)"
    this_dir=$(dirname $(dirname $0))
    npm_dir="${this_dir}/node_modules"
    jshint_bin="${npm_dir}/jshint/bin/jshint"

    files="$@"
    final_exit=""

    if [[ ! -f ${jshint_bin} ]]; then
      cd $this_dir
      echo "=== Installing jshint to $(pwd)..."
      npm install jshint
      cd $target_dir
    fi

    IFS=$' '
    for file in $files
    do

      if [[ ! -f "$file" ]]; then
        echo "=== Not a file: $file" 1>&2
        exit 1
      fi

      echo -n "=== Running jshint: $file: "

      set +e
      js_hint_results="$(${jshint_bin} "$file" 2>&1)"
      js_hint_exit_code="$?"
      set -e

      if [[ js_hint_exit_code -eq "0" ]]; then
        echo -e "${GREEN}Passed${RESET_COLOR}"
      else
        echo -e "${RED}Fail${RESET_COLOR}"
        echo "$js_hint_results"
        final_exit="$js_hint_exit_code"
      fi
    done # === for file

    if [[ -n "$final_exit" ]]; then
      exit $final_exit
    fi
    ;;

  *)
    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

  esac


