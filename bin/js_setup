#!/usr/bin/env bash
# -*- bash -*-
#
#
action="$1"
shift
set -u -e -o pipefail


function git_is_clean {
  if ! git_repo_is_clean
  then
    echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
    exit 1
  fi
}


TEMPLATES="/apps/js_setup/templates"

GREEN=$(tput setaf 2)
GREEN_BG=$(tput setab 2)
WHITE=$(tput setaf 7)
BOLD_WHITE_ON_GREEN=$(tput bold)${WHITE}${GREEN_BG}
BOLD_WHITE=$(tput bold)${WHITE}
RESET_COLOR=$(tput sgr0)
ORANGE='\e[0;33m'
RED='\e[0;31m'
BG_RED='\e[1;31m'

case "$action" in

  "help"|"--help")
    echo " ====================================================="
    echo " $ js_setup   init_bower"
    echo " $ js_setup   jshint     file"
    echo " $ js_setup   version    ..."
    echo ""
    echo " $ js_setup   js_zero    extended_regexp_for_grep"
    echo " $ js_setup   js_clean"
    echo ""
    echo " $ js_setup   add_dev_log  file"
    echo " ====================================================="
    bash_setup print_help $0
    exit 0
    ;;

  "js_clean")
    js_setup js_zero "console.log\(|debugger"
    ;;

  "has_ts")
    # === $ has_typescript path/to/file.js
    # === Exit 0 if path/to/file.ts exists. Otherwise Exit 1.
    file="$1"
    shift
    ts_file="$(dirname $file)/$(basename $file .js).ts"
    [[ -f "$ts_file" ]] && exit 0
    ;;

  "add_dev_log")
    file="$1"
    shift
    echo -e "\n\n/* global process */\nvar log; log = function (...args) {\n  return (process.env.IS_DEV) ? console.log.apply(console, args) : null;\n};" >> $file
    exit 0

    if ! grep "var log;" "$file" 1>/dev/null; then
      output=$(sed '/^$/a var log;\nlog = function () {\n  return (process.env.IS_DEV) ? console.log.apply(console, arguments) : null;\n};' $file)
      echo -e "$output" > $file
    fi
    ;;

  "js_zero")
    SUBSTR="$1"
    FOUND="no"

    for FILE in $(git ls-files | grep -E '.js$') ; do
      GREPS="$(grep -n -E "$SUBSTR" $FILE || echo '')"
      if [ ! -z "$GREPS" ]
      then
        echo -e -n "\e[01;31m$FILE\e[0m " 1>&2
        echo "contains $SUBSTR" 1>&2
        echo "$GREPS" 1>&2
        FOUND="yes"
      fi
    done

    if [ "$FOUND" = "yes" ]
    then
      exit 1
    fi
    ;;


  "init_bower")
    name="$(basename $(pwd))"

    if [[ ! -f ".gitignore" ]]; then
      echo "/node_modules" >> .gitignore
      echo "/scripts" >> .gitignore
    fi

    if [[ ! -f "specs.html" ]]; then
      contents="$(cat $TEMPLATES/specs.html)"
      echo "${contents//\{\{name\}\}/$name}" > specs.html
      echo "=== specs.html"
    fi

    if [[ ! -f "specs.js" ]]; then
      echo '"use strict";' > specs.js
      echo "=== specs.js"
    fi

    if [[ ! -f "bin/$name" ]]; then
      mkdir -p bin/
      contents="$(cat $TEMPLATES/bin)"
      echo "${contents//\{\{name\}\}/$name}" > bin/$name
      chmod +x bin/$name
      echo "=== bin/$name"
    fi

    if [[ ! -f ".bowerrc" ]]; then
      cp "$TEMPLATES/.bowerrc"   .bowerrc
      echo "=== .bowerrc"
    fi

    if [[ ! -d "node_modules/bower" ]]; then
      npm install bower
    fi

    if [[ ! -f "bower.json" ]]; then
      bin/$name bower init
    fi

    if [[ ! -d "scripts/jasmine" ]]; then
      bin/$name bower install --save-dev jasmine
      bin/$name bower install --save     lodash
      bin/$name bower install --save     jquery
    fi
    ;;

  "version")
    git push
    js_setup js_clean

    if [[ -f package.json ]]; then
      echo "=== Updating modules..."
      npm update
      # === "npm shrinkwrap" will fail if extraneous
      #     modules are found. "npm prune" takes care
      #     of this.
      npm prune
      npm shrinkwrap
    fi

    if [[ ! -f specs.html ]]; then
      if [[ -f specs.js ]]; then
        $0 mocha specs.js
      fi
    fi

    if ! git_repo_is_clean; then
      echo "=== Git repo is not clean" 1>&2
      git status
      exit 1
    fi

    if [[ -f bower.json ]]; then
      bower version $@
      git push origin "v$(node -p "require('./bower').version")"
    else
      if [[ -f package.json ]] ; then
        npm version $@
        git push origin "v$(node -p "require('./package.json').version")"
      fi
    fi

    git push
    ;;

  "mocha")
    if [[ -z "$IS_DEV" ]]; then
      exit 1
    fi
    echo "=== node_modules/mocha/bin/mocha --es_staging "$@""
    if [[ ! -f node_modules/mocha/bin/mocha ]] ; then
      cmd="npm install mocha"
      echo "=== $cmd"
      $cmd
    fi
    node_modules/mocha/bin/mocha --es_staging "$@"
    ;;

  "watch")
    files="$(echo ./*.js)"
    for f in $files
    do
      js_setup jshint! $f
    done

    if [[ -n "$@" ]]; then
      $0 mocha "$@" specs.js || :
    fi

    echo -e "=== Watching ${BOLD_WHITE}$(basename $(pwd))${RESET_COLOR} (proc $$)...\n"

    while read CHANGE
    do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)
      path="${dir}$file"
      echo -e "=== $CHANGE ($path)"

      if [[ "$path" =~ ".js" ]]; then
        if js_setup jshint! $path && [[ -f "specs.js" ]] ; then
          echo "=== Running: specs.js"
          $0 mocha "$@" specs.js || :
        fi
      fi

      echo ""
    done < <(inotifywait --quiet --monitor --event close_write  $files )

    ;;

  "jshint")
    $0 jshint! "$@" || :
    ;;

  "jshint!")
    target_dir="$(pwd)"
    this_dir=$(dirname $(dirname $0))
    npm_dir="${this_dir}/node_modules"
    reporter="node_modules/jshint-path-reporter/index.js"
    jshint_bin="${npm_dir}/jshint/bin/jshint"
    cmd="$jshint_bin --reporter $reporter"


    if [[ ! -f ${jshint_bin} ]]; then
      cd $this_dir
      echo "=== Installing jshint to $(pwd)..."
      npm install jshint
      cd $target_dir
    fi

    if [[ ! -f "$reporter" ]]; then
      echo "=== Installing jshint-path-reporter..."
      npm install jshint-path-reporter
    fi

    echo -n "=== Running jshint: $@: "
    $cmd "$@"
    # echo -e "${GREEN}Passed${RESET_COLOR}"
    # echo -e "${RED}Fail${RESET_COLOR}"
    ;;

  "list")
    # === $ ... list
    # === Prints available remote node versions.
    $0 nvm "ls-remote"
    ;;

  "install")
    # === $ ... install VERSION
    # === Uses NVM to install a node version.
    $0 nvm install $@
    ;;

  "nvm")
    if ! type nvm 2>/dev/null; then
      if [[ -d /progs/nvm ]]; then
        cd /progs/nvm
        git pull 1>/dev/null
      else
        cd /progs
        git clone https://github.com/creationix/nvm
        cd nvm
      fi

      source ./nvm.sh
    fi
    set +u
    nvm $@
    ;;

  *)
    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

  esac


